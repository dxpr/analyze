<?php

/**
 * @file
 * Provides analysis functionality for the site.
 */

use Drupal\Core\Entity\EntityFormInterface;
use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_theme().
 *
 * Defines the theme for the analyze gauge.
 *
 * @phpstan-return array<string, array<string, mixed>>
 */
function analyze_theme(): array {
  return [
    'analyze_gauge' => [
      'variables' => [
        'caption' => NULL,
        'range_min_label' => NULL,
        'range_mid_label' => NULL,
        'range_max_label' => NULL,
        'range_min' => NULL,
        'value' => NULL,
        'display_value' => NULL,
        'range_max' => NULL,
      ],
    ],
    'analyze_table' => [
      'variables' => [
        'table_title' => NULL,
        'rows' => [],
      ],
    ],
  ];
}

/**
 * Implements hook_local_tasks_alter().
 *
 * @phpstan-param array<string, array<string, mixed>> $local_tasks
 */
function analyze_local_tasks_alter(array &$local_tasks): void {

  /** @var \Drupal\analyze\AnalyzePluginManager $service */
  $service = \Drupal::service('plugin.manager.analyze');

  // Add local actions for all entities if we have plugins enabled.
  if ($plugins = $service->getDefinitions()) {
    foreach (\Drupal::service('analyze.helper')->getEntityDefinitions() as $entity_type) {
      $id = $entity_type->id();
      $analyze_route = 'entity.' . $id . '.analyze';

      // The analyze route.
      $local_tasks[$analyze_route] = [
        'id' => $analyze_route,
        'title' => t('Analyze'),
        'route_name' => $analyze_route,
        'route_parameters' => [],
        'base_route' => 'entity.' . $id . '.canonical',
        'class' => 'Drupal\Core\Menu\LocalTaskDefault',
        'provider' => 'analyze',
        'options' => [],
        'weight' => 0,
      ];

      // The default secondary tab.
      $default = $analyze_route . '.default';
      $local_tasks[$default] = [
        'id' => $default,
        'title' => t('Summary'),
        'route_name' => $analyze_route,
        'route_parameters' => [],
        'base_route' => 'entity.' . $id . '.canonical',
        'class' => 'Drupal\Core\Menu\LocalTaskDefault',
        'provider' => 'analyze',
        'parent_id' => $analyze_route,
        'options' => [],
        'weight' => 0,
      ];

      // Add secondary tabs for all entities if we have plugins enabled.
      if ($service->getDefinitions()) {
        foreach ($plugins as $plugin) {
          $route = 'analyze.' . $id . '.' . $plugin['id'];
          $local_tasks[$route] = [
            'id' => $route,
            'title' => $plugin['label'],
            'route_name' => $route,
            'route_parameters' => [],
            'class' => 'Drupal\Core\Menu\LocalTaskDefault',
            'parent_id' => $analyze_route,
            'provider' => 'analyze',
            'options' => [],
            'base_route' => 'entity.' . $id . '.canonical',
          ];
        }
      }
    }
  }
}

/**
 * Implements hook_form_alter().
 *
 * @phpstan-param array<string, mixed> $form
 */
function analyze_form_alter(array &$form, FormStateInterface $form_state, string $form_id): void {
  if ($form_id !== 'analyze_analyze_settings') {
    $is_bundle_form = $entity_type = $bundle = FALSE;
    $form_object = $form_state->getFormObject();

    // User's aren't bundle-able, but we want the opportunity to include them in
    // insights so we'll hard-code the form id.
    if ($form_id == 'user_admin_settings') {
      $is_bundle_form = TRUE;
      $entity_type = 'user';
      $bundle = 'user';
    }
    else {
      // Otherwise, we need to identify if this is a bundle entity's edit form
      // by digging down to get the bundle_of setting.
      if ($form_object instanceof EntityFormInterface) {
        $entity = $form_object->getEntity();
        $type = $entity->getEntityType();
        if ($entity_type = $type->getBundleOf()) {
          $is_bundle_form = TRUE;
          $bundle = $entity->id();
        }
      }
    }

    if ($is_bundle_form) {
      analyze_add_settings_form($form, $entity_type, $bundle);
      $form_state->set('analyze.entity_type', $entity_type);
      $form_state->set('analyze.bundle', $bundle);
    }
  }
}

/**
 * Helper to add Analyze settings to a form.
 *
 * @param mixed[] $form
 *   The form.
 * @param string $entity_type
 *   The entity type the settings are for.
 * @param string|null $bundle
 *   The bundle the settings are for.
 */
function analyze_add_settings_form(array &$form, string $entity_type, ?string $bundle = NULL): void {
  // If the user doesn't have the permission.
  if (!\Drupal::currentUser()->hasPermission('administer analyze')) {
    return;
  }
  // If no applicable plugins are found.
  $definitions = \Drupal::service('analyze.helper')->getApplicableDefinitions($entity_type, $bundle);
  if (!$definitions) {
    return;
  }

  $form['analyze'] = [
    '#type' => 'details',
    '#title' => t('Analyze settings'),
    '#description' => t('Enable Analyze reports for this entity.'),
    '#group' => 'additional_settings',
    '#tree' => TRUE,
  ];

  /** @var \Drupal\analyze\AnalyzePluginManager $plugin_manager */
  $plugin_manager = \Drupal::service('plugin.manager.analyze');

  foreach ($definitions as $plugin_id => $definition) {
    // Get the plugin instance
    $plugin = $plugin_manager->createInstance($plugin_id);
    // Get the plugin's settings form
    $plugin_form = $plugin->getEntityTypeSettingsForm($entity_type, $bundle);
    // Add the plugin's form directly to the analyze fieldset
    $form['analyze'][$plugin_id] = $plugin_form;
  }

  // Add submit handler to both possible locations
  if (isset($form['actions']['submit']['#submit'])) {
    $form['actions']['submit']['#submit'][] = 'analyze_add_settings_form_submit';
  }
  elseif (isset($form['#submit'])) {
    $form['#submit'][] = 'analyze_add_settings_form_submit';
  }
}

/**
 * Store the Analyze settings, if they have been set.
 */
function analyze_add_settings_form_submit(array &$form, FormStateInterface $form_state): void {
  $messenger = \Drupal::messenger();
  
  if ($values = $form_state->cleanValues()->getValue('analyze')) {
    $messenger->addStatus(t('Debug: Form values received: @values', [
      '@values' => print_r($values, TRUE),
    ]));
    
    $entity_type = $form_state->get('analyze.entity_type');
    $bundle = $form_state->get('analyze.bundle');
    
    // Get both config objects
    $status_config = \Drupal::configFactory()->getEditable('analyze.settings');
    $settings_config = \Drupal::configFactory()->getEditable('analyze.plugin_settings');
    
    // Get current status config
    $status = $status_config->get('status') ?? [];
    
    // Initialize the entity type if not set
    if (!isset($status[$entity_type])) {
      $status[$entity_type] = [];
    }
    
    // Reset the bundle's settings completely
    $status[$entity_type][$bundle] = [];
    
    foreach ($values as $plugin_id => $settings) {
      $messenger->addStatus(t('Debug: Processing @plugin: @settings', [
        '@plugin' => $plugin_id,
        '@settings' => print_r($settings, TRUE),
      ]));
      
      $key = "$entity_type.$bundle.$plugin_id";
      
      if (!empty($settings['enabled'])) {
        // Add to status if enabled
        $status[$entity_type][$bundle][$plugin_id] = TRUE;
        $messenger->addStatus(t('Debug: Enabled @plugin', ['@plugin' => $plugin_id]));
        
        // Save settings if present
        if (isset($settings['sentiments'])) {
          $settings_config->set($key, ['sentiments' => $settings['sentiments']]);
          $messenger->addStatus(t('Debug: Saved settings for @plugin at @key', [
            '@plugin' => $plugin_id,
            '@key' => $key,
          ]));
        }
      } else {
        // When a plugin is disabled, remove it from all bundles of this entity type
        foreach ($status[$entity_type] as $bundle_id => &$bundle_settings) {
          unset($bundle_settings[$plugin_id]);
        }
        // Clear settings when disabled
        $settings_config->clear($key);
        $messenger->addStatus(t('Debug: Disabled and cleared settings for @plugin', [
          '@plugin' => $plugin_id,
        ]));
      }
    }
    
    // Save both configs
    $status_config->set('status', $status)->save();
    $settings_config->save();
    
    $messenger->addStatus(t('Debug: Final status config: @config', [
      '@config' => print_r($status, TRUE),
    ]));
  }
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * @phpstan-param array<string, mixed> $variables
 */
function analyze_preprocess_analyze_table(array &$variables): void {
  if (!empty($variables['rows'])) {
    foreach ($variables['rows'] as $key => $row) {
      // Make sure to case row as string.
      $variables['rows'][$key]['data'] = (string) $row['data'];
    }
  }
}
