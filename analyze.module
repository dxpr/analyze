<?php

/**
 * @file
 * Provides analysis functionality for the site.
 */

use Drupal\Core\Cache\CacheableMetadata;
use Drupal\Core\Cache\RefinableCacheableDependencyInterface;
use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_theme().
 *
 * Defines the theme for the analyze gauge.
 */
function analyze_theme(): array {
  return [
    'analyze_gauge' => [
      'variables' => [
        'caption' => NULL,
        'range_min_label' => NULL,
        'range_mid_label' => NULL,
        'range_max_label' => NULL,
        'range_min' => NULL,
        'value' => NULL,
        'display_value' => NULL,
        'range_max' => NULL,
      ],
    ],
  ];
}

/**
 * Implements hook_menu_local_actions_alter().
 */
function analyze_menu_local_actions_alter(&$local_actions): void {

  /** @var \Drupal\analyze\AnalyzePluginManager $service */
  $service = \Drupal::service('plugin.manager.analyze');

  // Add local actions for all entities if we have plugins enabled.
  if ($plugins = $service->getDefinitions()) {
    $plugin_routes = [];

    foreach ($plugins as $plugin) {
      foreach (analyze_get_entity_types() as $id => $route) {
        $analyze_route = 'entity.' . $id . '.analyze';
        $plugin_route = 'analyze.' . $id . '.' . $plugin['id'];
        $plugin_routes[] = $plugin_route;

        $local_actions[$plugin_route] = [
          'id' => $plugin_route,
          'title' => $plugin['label'],
          'route_name' => $plugin_route,
          'route_parameters' => [],
          'appears_on' => [$analyze_route],
          'class' => 'Drupal\Core\Menu\LocalActionDefault',
          'provider' => 'analyze',
          'options' => [],
          'weight' => 0,
        ];
      }
    }

    // Add the plugins as local tasks on the plug report pages as well.
    foreach ($plugin_routes as $route) {
      if (!empty($local_actions[$route]['appears_on'])) {
        $local_actions[$route]['appears_on'] = array_merge($local_actions[$route]['appears_on'], $plugin_routes);
      }
    }
  }
}

/**
 * Implements hook_local_tasks_alter().
 */
function analyze_local_tasks_alter(&$local_tasks): void {

  /** @var \Drupal\analyze\AnalyzePluginManager $service */
  $service = \Drupal::service('plugin.manager.analyze');

  // Add local actions for all entities if we have plugins enabled.
  if ($service->getDefinitions()) {
    foreach (analyze_get_entity_types() as $id => $route) {
      $analyze_route = 'entity.' . $id . '.analyze';

      $local_tasks[$analyze_route] = [
        'id' => $analyze_route,
        'title' => t('Analyze'),
        'route_name' => $analyze_route,
        'route_parameters' => [],
        'base_route' => $route,
        'class' => 'Drupal\Core\Menu\LocalTaskDefault',
        'provider' => 'analyze',
        'options' => [],
        'weight' => 0,
      ];
    }
  }
}

/**
 * Implements hook_menu_local_tasks_alter().
 */
function analyze_menu_local_tasks_alter(&$local_tasks, $route_name, RefinableCacheableDependencyInterface &$cacheability): void {
  if (str_starts_with($route_name, 'analyze.')) {
    /** @var \Drupal\analyze\AnalyzePluginManager $service */
    $service = \Drupal::service('plugin.manager.analyze');

    // Add local actions for all entities if we have plugins enabled.
    if ($plugins = $service->getDefinitions()) {
      foreach (analyze_get_entity_types() as $id => $route) {
        foreach ($plugins as $plugin) {
          $plugin_route = 'analyze.' . $id . '.' . $plugin['id'];
          $entity_route = 'entity.' . $id . '.canonical';

          if ($route_name === $plugin_route) {
            $canonical_local_tasks = \Drupal::service('plugin.manager.menu.local_task')
              ->getLocalTasks($entity_route);
            $local_tasks['tabs'][0] = $canonical_local_tasks['tabs'];

            // Mark the version history local task as active when viewing a node
            // revision.
            foreach ($local_tasks['tabs'][0] as $route_name => &$tab) {
              $tab['#active'] = $route_name === 'entity.' . $id . '.analyze';
            }

            $cacheability = CacheableMetadata::createFromObject($cacheability)
              ->merge($canonical_local_tasks['cacheability']);
          }
        }
      }
    }
  }
}

/**
 * Implements hook_form_alter().
 */
function analyze_form_alter(&$form, FormStateInterface $form_state, $form_id): void {
  $is_bundle_form = $entity_type = $bundle = FALSE;
  $form_object = $form_state->getFormObject();

  // User's aren't bundle-able, but we want the opportunity to include them in
  // insights so we'll hard-code the form id.
  if ($form_id == 'user_admin_settings') {
    $is_bundle_form = TRUE;
    $entity_type = 'user';
    $bundle = 'user';
  }
  else {

    // Otherwise, we need to identify if this is a bundle entity's edit form by
    // digging down to get the bundle_of setting.
    if (method_exists($form_object, 'getEntity') && $entity = $form_object->getEntity()) {
      if (method_exists($entity, 'getEntityType') && $type = $entity->getEntityType()) {
        if (method_exists($type, 'getBundleOf') && $entity_type = $type->getBundleOf()) {
          $is_bundle_form = TRUE;
          $bundle = $entity->id();
        }
      }
    }
  }

  if ($is_bundle_form) {
    analyze_add_settings_form($form, $entity_type, $bundle);
    $form_state->set('entity_type', $entity_type);
    $form_state->set('bundle', $bundle);
  }
}

/**
 * Helper to add Analyze settings to a form.
 *
 * @param mixed[] $form
 *   The form.
 * @param string $entity_type
 *   The entity type the settings are for.
 * @param string $bundle
 *   The bundle the settings are for.
 */
function analyze_add_settings_form(array &$form, string $entity_type, string $bundle): void {
  if (\Drupal::currentUser()->hasPermission('administer analyze')) {
    $config = \Drupal::config('analyze.settings')->get('status');

    $form['analyze'] = [
      '#type' => 'details',
      '#title' => t('Analyze settings'),
      '#description' => t('Enable Analyze reports for this entity.'),
      '#parents' => ['analyze'],
      '#open' => !empty($config[$entity_type][$bundle]),
    ];

    foreach (\Drupal::service('plugin.manager.analyze')->getDefinitions() as $id => $definition) {
      $form['analyze'][$id] = [
        '#type' => 'checkbox',
        '#title' => $definition['label'],
        '#default_value' => isset($config[$entity_type][$bundle][$id]),
        '#parents' => ['analyze', $id],
      ];
    }

    if (isset($form['actions']['submit']['#submit'])) {
      $form['actions']['submit']['#submit'][] = 'analyze_add_settings_form_submit';
    }
    elseif (isset($form['#submit'])) {
      $form['#submit'][] = 'analyze_add_settings_form_submit';
    }
  }
}

/**
 * Store the Analyze settings, if they have been set.
 *
 * @param mixed[] $form
 *   The Drupal form.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The form state.
 */
function analyze_add_settings_form_submit(array &$form, FormStateInterface $form_state): void {
  if ($values = $form_state->cleanValues()->getValue('analyze')) {
    $config = \Drupal::configFactory()->getEditable('analyze.settings')->get('status');
    $entity_type = $form_state->get('entity_type');
    $bundle = $form_state->get('bundle');

    // Clear any old settings for this bundle.
    $config[$entity_type][$bundle] = [];

    foreach ($values as $plugin_id => $status) {
      if ($status) {
        $config[$entity_type][$bundle][$plugin_id] = TRUE;
      }
    }

    \Drupal::configFactory()->getEditable('analyze.settings')
      ->set('status', $config)
      ->save();
  }
}

/**
 * Helper to get all entities with a canonical route.
 *
 * @return string[]
 *   An array of entity id => canonical route name.
 */
function analyze_get_entity_types(): array {
  $return = [];

  foreach (\Drupal::entityTypeManager()->getDefinitions() as $entity_type) {
    if ($entity_type->hasLinkTemplate('canonical')) {
      $return[$entity_type->id()] = 'entity.' . $entity_type->id() . '.canonical';
    }
  }

  return $return;
}
